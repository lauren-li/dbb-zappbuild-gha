name: Demo-DBB_Build_on_ZOS_with_GitHub_Actions_Zowe_and_RSE_API
## Notes:
# A sample z/OS DBB workflow using an IBM RSE API Plug-in for Zowe CLI profile (RSE profile)
# Global vars
env:
  # Zowe connection information
  Zowe_RSE_ProfileName: 'rse'                  # Name of a valid RSE profile on the GitHub Actions (GHA) runner.
  Zowe_RSE_CommandWorkingDir: '/u/laurenl'  # Command working directory - The Unix System Services (USS) directory from which to issue commands.
                                            #                             This could be the RSE profile user's home directory.  
                                           
  # Pipeline scripts on z/OS (relative to the Zowe RSE user's Home Dir in Unix - USS).
  Echo: 'ibm/echo.sh'                       # Optional script for testing connection from GHA runner to z/OS
  Clone: 'ibm/git-clone-https.sh'           # Script to clone the code from GitHub to z/OS
  DBB_Build: 'ibm/dbb-build-test.sh'        # Script to perform the DBB build on z/OS
  Prepare_Logs: 'ibm/prepare-logs.sh'       # Script to gather build log files into a single archive file

# "on" trigger to manually start this workflow. Can add "pull, push..." for auto trigger.
# see https://docs.github.com/en/actions/learn-github-actions/contexts
on: workflow_dispatch

jobs:
  DBB_Build_on_zOS:
    runs-on: self-hosted

    env:
      # Project related variables. GHA automatically fills in relevant repository information for values enclosed in ${{...}}.
      MyRepoHttps: ${{ github.server_url }}/${{ github.repository }}.git          # Source code repository URL (HTTPS)
      MyBranch: ${{ github.ref }}                                                 # Branch to run the GHA pipeline on
      MyWorkDir: tmp/ghActions/dbb-zappbuild-gha_run_${{ github.run_number }}     # Absolute path to directory for storing the clone and build outputs
      MyWorkSpace: /u/laurenl/dbb-zappbuild-gha/samples                           # Absolute path to workspace (root) directory containing all required source directories
      MyApplication: MortgageApplication                                          # Application directory name (relative to MyWorkSpace)
      MyHlq: LAURENL.ZAPP.CLEAN.MASTER                                            # High level qualifier for partitioned data sets

    steps:
      - name: Test GHA runner connection to z/OS  # Optional step for basic connection test from GHA runner to z/OS
        run: zowe rse issue uss "${{ env.Echo }} ${{ env.MyRepoHttps }}" --cwd "${{ env.Zowe_RSE_CommandWorkingDir}}"

      - name: Clone repository
        run: zowe rse issue uss "${{ env.Clone }} ${{ env.MyRepoHttps }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }} ${{ env.MyBranch }}" --cwd "${{ env.Zowe_RSE_CommandWorkingDir}}"

#       - name: DBB_Impact_Build
#         run: zowe rse issue uss "${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }} ${{ env.MyApplication }} ${{ env.MyHlq }} --impactBuild" --cwd "${{ env.Zowe_RSE_CommandWorkingDir}}"

      - name: DBB Full Build
        run: zowe rse issue uss "${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }} ${{ env.MyApplication }} ${{ env.MyHlq }} --fullBuild" --cwd "${{ env.Zowe_RSE_CommandWorkingDir}}"

      - id: prepare_logs
        name: Prepare Logs  # Package build logs on z/OS as tar file, and pass filename back to GitHub Actions       
        run: |
          echo "buildLogsLocation=$(zowe rse issue uss '${{ env.Prepare_Logs }} ${{ env.MyWorkDir }}' --cwd '${{ env.Zowe_RSE_CommandWorkingDir}}')" >> $ENV:GITHUB_OUTPUT

      - id: download_logs
        name: Download Logs from USS to GHA runner  # Create new logs directory (if not already existing) in GitHub Actions Runner's working directory, then download logs into it. 
        run: |
          $runnerLogsDir = "logs"
          echo "runnerLogsDir=$runnerLogsDir" >> $ENV:GITHUB_OUTPUT
          New-Item $runnerLogsDir -ItemType directory -Force
          zowe rse download uss-file "${{ env.Zowe_RSE_CommandWorkingDir}}/${{ env.Zowe_RSE_WorkDir}}/${{ env.MyWorkDir }}/${{ steps.prepare_logs.outputs.buildLogsLocation }}" -f "$runnerLogsDir/${{ steps.prepare_logs.outputs.buildLogsLocation }}" -b

      - id: get_basename
        name: Get basename  # Get artifact name without extension (also used for path, if uploading directory)
        run: echo "runnerBuildLogsLocation=$((Get-Item ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.prepare_logs.outputs.buildLogsLocation }}).Basename)" >> $ENV:GITHUB_OUTPUT

      # Uncomment the below untar step if you want to upload the directory rather than the tarfile. (It will upload as a zip file on GitHub.)
      - name: Untar file on GHA runner
        run: tar -xvf ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.prepare_logs.outputs.buildLogsLocation }} -C ${{ steps.download_logs.outputs.runnerLogsDir }}

      # - name: test runnerBuildLogsLocation
      #   run: |
      #     echo ${{ steps.get_basename.outputs.runnerBuildLogsLocation }}
      #     echo ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.prepare_logs.outputs.buildLogsLocation }} 
      #     echo ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.get_basename.outputs.runnerBuildLogsLocation }}

      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get_basename.outputs.runnerBuildLogsLocation }}  # Name used for artifact when it is uploaded
          # path: ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.prepare_logs.outputs.buildLogsLocation }}        # Path to artifact
          path: ${{ steps.download_logs.outputs.runnerLogsDir }}/${{ steps.get_basename.outputs.runnerBuildLogsLocation }}  # Use this path instead if uploading the directory instead of tarfile

