name: Demo-DBB_Build_on_ZOS_with_GitHub_Actions_Zowe_and_RSE_API
## Notes:
# A sample zOS DBB workflow
# Global vars
env:
  # Zowe connection information
  Zowe_RSE_ProfileName: 'myRseProfile'     # Name of a valid RSE profile on the GitHub Actions (GHA) runner.
  Zowe_RSE_CommandWorkingDir: '/u/laurenl' # Command working directory - The Unix System Services (USS) directory from which to issue commands.
                                           #                             This could be the RSE profile user's home directory. 
  
  # Pipeline scripts on z/OS (relative to the RSE profile user's Home Dir in USS)
  Clone: 'ibm/git-clone-https.sh'          # Script to clone the code from GitHub to z/OS
  DBB_Build: 'ibm/dbb-build-test.sh'       # Script to perform the DBB build on z/OS
  Prepare_Logs: 'ibm/prepare-logs.sh'      # Script to gather build log files into a single archive file

# "on" trigger to manually start this workflow. Can add "pull, push..." for auto trigger.
# see https://docs.github.com/en/actions/learn-github-actions/contexts
on: workflow_dispatch

jobs:
  DBB_Build_on_zOS:
    runs-on: self-hosted

    env:
      # Project related variables. GHA automatically fills in relevant repository information for values enclosed in ${{ ... }}.
      MyRepoHttps: ${{ github.server_url }}/${{ github.repository }}.git      # Source code repository URL (HTTPS)
      MyBranch: ${{ github.ref }}                                             # Branch to run the GHA pipeline on
      MyWorkDir: tmp/ghActions/dbb-zappbuild-gha_run_${{ github.run_number }} # Absolute path to directory for storing the clone and build outputs
      MyWorkSpace: /u/laurenl/dbb-zappbuild-gha/samples                       # Absolute path to workspace (root) directory containing all required source directories
      MyApplication: MortgageApplication                                      # Application directory name (relative to MyWorkSpace)
      MyHlq: LAURENL.ZAPP.CLEAN.MASTER                                        # High level qualifier for partitioned data sets
        
    steps:  
      - name: Clone repository
        id: clone
        run: >
          zowe rse issue uss "${{ env.Clone }} ${{ env.MyRepoHttps }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }} ${{ env.MyBranch }}"
          --cwd "${{ env.Zowe_RSE_CommandWorkingDir }}"
          --rse-p "${{ env.Zowe_RSE_ProfileName }}"

      - name: DBB Impact Build
        id: dbb_impact_build
        run: >
          zowe rse issue uss "${{ env.DBB_Build }} ${{ env.MyWorkDir }} ${{ env.MyWorkSpace }} ${{ env.MyApplication }} ${{ env.MyHlq }} --impactBuild"
          --cwd "${{ env.Zowe_RSE_CommandWorkingDir }}"
          --rse-p "${{ env.Zowe_RSE_ProfileName }}"

      - name: Prepare Logs
        id: prepare_logs     
        run: >
          echo "::set-output name=buildLogsLocation::$(zowe rse issue uss '${{ env.Prepare_Logs }} ${{ env.MyWorkDir }}'
          --cwd '${{ env.Zowe_RSE_CommandWorkingDir }}'
          --rse-p "${{ env.Zowe_RSE_ProfileName }}")"
  
      - name: Download Logs
        id: download_logs
        run: >
          zowe rse download uss-file "${{ env.Zowe_RSE_CommandWorkingDir}}/${{ steps.prepare_logs.outputs.buildLogsLocation }}" -b
          --rse-p "${{ env.Zowe_RSE_ProfileName }}"      
